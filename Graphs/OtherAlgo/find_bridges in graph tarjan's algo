class Solution {
    private: int timer = 1;
public:

    void dfs(int node,int par,vector<int>&vis,vector<int>adj[],int tin[],int low[],
            vector<vector<int>>&bridges)
    {
        vis[node]=1;
        tin[node] = low[node] = timer;
        timer++;
        for(auto it : adj[node])
        {
            // if(it==par) continue;
            if(vis[it]==0) //unvisited neighbours
            {
                dfs(it,node,vis,adj,tin,low,bridges);
                // node is par of it
                low[node] = min(low[node],low[it]);
                //check if node-it is bridge or not
                // now way to reach node
                if(tin[node] < low[it])
                {
                    bridges.push_back({node,it});
                }
            }
            else //visited neighbours
            {
                // bridge can't be found here as it was already visited/checked
                if(it != par)
                    low[node] = min(low[it],low[node]);
            }
        }
    }
    vector<vector<int>> criticalConnections(int n, vector<vector<int>>&connections) {
        
        // create adjlist
        vector<int>adj[n];
        for(auto it : connections)
        {
            adj[it[0]].push_back(it[1]);
            adj[it[1]].push_back(it[0]);
        }
        // 
        int tin[n] ,low[n];
        vector<vector<int>> bridges;
        vector<int>vis(n,0);
        dfs(0,-1,vis,adj,tin,low,bridges);
        return bridges;
    }
};
