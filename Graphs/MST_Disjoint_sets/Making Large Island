class DisjointSet{
    public:
    vector<int>size,par;
    
    DisjointSet(int n)
    {
        size.resize(n+1,1);
        par.resize(n+1);
        for(int i=0;i<=n;i++)
            par[i] = i;
    }
    int findUPar(int u)
    {
        if(u==par[u])return u;
        return par[u] = findUPar(par[u]);
    }
    void unionbysize(int u,int v)
    {
        int pu = findUPar(u);
        int pv = findUPar(v);
        
        if(pu == pv) return; //already connected no worries
        if(size[pu] < size[pv])
        {
            par[pu] = pv;
            size[pv] += size[pu];
        }
        else
        {
            par[pv] = pu;
            size[pu] += size[pv];
        }
    }
};
class Solution {
  public:
    int MaxConnection(vector<vector<int>>& grid) {
        
        int n = grid.size();
        int m = grid[0].size();
        DisjointSet ds(n*m);
        vector<int>vis(n*m,0);
        int dx[] = {1,0,-1,0};
        int dy[] = {0,1,0,-1};
        
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                int node = i*m + j;
                if(grid[i][j]==1)
                {
                    for(int k=0;k<4;k++)
                    {
                        int nrow = i+dx[k];
                        int ncol = j+dy[k];
                        int nbr = nrow * m + ncol;
                        // boundary & nbr should be 1
                        if(nrow >=0 && nrow <n && ncol >=0 && ncol<m &&
                        grid[nrow][ncol]==1)
                        {
                            ds.unionbysize(node,nbr);
                        }
                    }
                }
                
                
            }
        }
        int maxi =0;
        for(int i=0;i<n*m;i++)
        {
            int row = i/m;
            int col = i%m;
            if(grid[row][col] == 1 && ds.par[i]==i)
            {
                maxi = max(maxi,ds.size[i]);
            }
        }
        
        
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                unordered_set<int> s;
                if(grid[i][j]==0)
                {
                    int node = i*m+j;
                    for(int k=0;k<4;k++)
                    {
                        int nrow = i+dx[k];
                        int ncol = j+dy[k];
                        int nbr = nrow * m + ncol;
                        //boundary & neighbour should not be 1
                        if(nrow >=0 && nrow <n && ncol >=0 && ncol<m &&
                        grid[nrow][ncol]==1)
                        {
                            s.insert(ds.findUPar(nbr));
                        }
                    }
                    int sum = 1;
                    for(auto it : s)
                    {
                        sum += ds.size[it];
                    }
                    maxi = max(sum,maxi);
                }
            }
        }
        return maxi;
    }
};
