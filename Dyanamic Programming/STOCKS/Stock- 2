class Solution {
public:
    // memoization
    int solve(int ind,int buy,vector<int>&prices,vector<vector<int>>&dp)
    {
        int n = prices.size();
        //base case
        if(ind == n)
        {
            return 0;
        }
        if(dp[ind][buy] != -1) return dp[ind][buy];
        //rec case
        if(buy == 1)
        {
            int pick = -prices[ind] + solve(ind+1,0,prices,dp);
            int notpick = 0 + solve(ind+1,1,prices,dp);
            return dp[ind][buy] = max(pick,notpick);
        }
        else
        {
            int sell = prices[ind] + solve(ind+1,1,prices,dp);
            int notsell = 0 + solve(ind+1,0,prices,dp);
            return dp[ind][buy] = max(sell,notsell);
        }
    }
    // tabulation
        int solveTab(int ind,int buy,vector<int>&prices,vector<vector<int>>&dp)
    {
        int n = prices.size();
        for(int i=0;i<=n;i++)
        {
            for(int j=0;j<=1;j++)
            {
                dp[i][j] = 0;
            }
        }
        // base case covered
        dp[n][0] =0; dp[n][1] = 0;
        for(int index = n-1;index >=0 ;index--)
        {
            for(int buy=0;buy<=1;buy++)
            {
                if(buy == 1)
                {
                    int pick = -prices[index] + dp[index+1][0];
                    int notpick = 0 + dp[index+1][1];
                    dp[index][buy] = max(pick,notpick);
                }
                else
                {
                    int sell = prices[index] + dp[index+1][1];
                    int notsell = 0 + dp[index+1][0];
                    dp[index][buy] = max(sell,notsell);
                }
            }
        }
        return dp[0][1];
    } 
        // tabulation
        int solveSpaceOpti(int ind,int buy,vector<int>&prices,vector<vector<int>>&dp)
    {
        int n = prices.size();
        vector<int>ahead(2,0),cur(2,0);
        // base case covered
        dp[n][0] =0; dp[n][1] = 0;
        for(int index = n-1;index >=0 ;index--)
        {
            for(int buy=0;buy<=1;buy++)
            {
                if(buy == 1)
                {
                    int pick = -prices[index] + ahead[0];
                    int notpick = 0 + ahead[1];
                    cur[buy] = max(pick,notpick);
                }
                else
                {
                    int sell = prices[index] + ahead[1];
                    int notsell = 0 + ahead[0];
                    cur[buy] = max(sell,notsell);
                }
            }
            ahead = cur;
        }
        return ahead[1];
    } 
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        vector<vector<int>>dp(n+1,vector<int>(2,-1));
        return solveSpaceOpti(0,1,prices,dp);
    }
};
