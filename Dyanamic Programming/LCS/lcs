	#include<vector>
	// ---------------------------------------------------------------
	//  Memoization
	// ---------------------------------------------------------------
	int solve(int n,int m,string &s,string &t,vector<vector<int>>&dp)
	{
		if(n==0 || m==0) return 0;
		if(dp[n][m] != -1) return dp[n][m];
		if(s[n-1] == t[m-1])
		{
			return dp[n][m] = 1 + solve(n-1,m-1,s,t,dp);
		}
		else
		{
			return  dp[n][m] = max(solve(n-1,m,s,t,dp),solve(n,m-1,s,t,dp));
		}
		
	}
	// ---------------------------------------------------------------
	//  Tabulation
	// ---------------------------------------------------------------
	int solveTabulation(int n,int m,string &s,string &t,vector<vector<int>>&dp)
	{
		for(int i=0;i<n;i++)
		{
			dp[i][0] = 0;
		}
		for(int j=0;j<m;j++)
		{
			dp[0][j] = 0;
		}
		for(int i=1;i<n+1;i++)
		{
			for(int j=1;j<m+1;j++)
			{
				if(s[i-1] == t[j-1])
				{
					dp[i][j] = 1+dp[i-1][j-1];
				}
				else
				{
					dp[i][j] = max(dp[i-1][j],dp[i][j-1]);
				}
			}
		}
		return dp[n][m];
	}
	// ---------------------------------------------------------------
	//  Space opti
	// ---------------------------------------------------------------
	int solveSpaceOpti(int n,int m,string &s,string &t,vector<vector<int>>&dp)
	{
		vector<int>prev(m+1,0),cur(m+1,0);
		for(int i=1;i<n+1;i++)
		{
			for(int j=1;j<m+1;j++)
			{
				if(s[i-1] == t[j-1])
				{
					cur[j] = 1+prev[j-1];
				}
				else
				{
					cur[j] = max(prev[j],cur[j-1]);
				}
			}
			prev = cur;
		}
		return cur[m];
	}
	// ---------------------------------------------------------------
	//  Space opti 1 array not possible 
	// if char match we need prev value , if not match we need updated value
	// ---------------------------------------------------------------
	
	int lcs(string s, string t)
	{
		int n = s.size();
		int m = t.size();
		vector<vector<int>>dp(n+1,vector<int>(m+1,-1));
		return solveSpaceOpti(s.size(),t.size(),s,t,dp);
	}
