class Solution {
public:
//---------------------------------------------------------
//------------------------Memoization----------------------
//---------------------------------------------------------
    int solve(int n,int m,string &s,string &t,vector<vector<int>>&dp)
    {
        if(n==0 && m >0) return 0;
        if(m==0) return 1;

        if(dp[n][m] != -1) return dp[n][m];

        if(s[n-1] == t[m-1])
        {
            return dp[n][m] = solve(n-1,m-1,s,t,dp)+solve(n-1,m,s,t,dp);
        }
        else
        {
            return dp[n][m] = solve(n-1,m,s,t,dp);
        }
        
    }
//---------------------------------------------------------
//------------------------Tabulation----------------------
//---------------------------------------------------------
int solveTab(int n,int m,string &s,string &t)
    {
        // use double to handle large values
        vector<vector<double>>dp(n+1,vector<double>(m+1,0));
        for(int i=0;i<n+1;i++)
        {
            for(int j=0;j<m+1;j++)
            {
                dp[i][j] = 0;
            }
        }
        //base case
        for(int i=0;i<=n;i++)
        {
            dp[i][0] = 1;
        }
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=m;j++)
            {
                if(s[i-1] == t[j-1])
                {
                    dp[i][j] = dp[i-1][j] + dp[i-1][j-1];
                }
                else
                {
                    dp[i][j] = dp[i-1][j];
                }
            }
        }
        return (int)dp[n][m];
        
    }
//---------------------------------------------------------
//------------------------space opti----------------------
//---------------------------------------------------------
int solveSpaceOpti(int n,int m,string &s,string &t)
    {
        // use double to handle large values
        vector<double>prev(m+1,0),cur(m+1,0);
        prev[0] = 1;
        
        //base case
        
        for(int i=1;i<=n;i++)
        {
            prev[0] = 1;
            for(int j=1;j<=m;j++)
            {
                if(s[i-1] == t[j-1])
                {
                    cur[j] = prev[j] + prev[j-1];
                }
                else
                {
                    cur[j] = prev[j];
                }
            }
            prev = cur;
        }
        return (int)cur[m];
        
    }
    //---------------------------------------------------------
//------------------------single array ----------------------
//---------------------------------------------------------
int solveSpaceOpti1d(int n,int m,string &s,string &t)
    {
        // use double to handle large values
        vector<double>prev(m+1,0); 
        //base case
        
        for(int i=1;i<=n;i++)
        {
            prev[0] = 1;
            for(int j=m;j>=1;j--)
            {
                if(s[i-1] == t[j-1])
                {
                    prev[j] = prev[j] + prev[j-1];
                }
                else
                {
                    prev[j] = prev[j];
                }
            }
        }
        return (int)prev[m];
        
    }
    int numDistinct(string s, string t) {
        int n = s.size();
        int m = t.size();
        vector<vector<int>>dp(n+1,vector<int>(m+1,-1));
        return solveSpaceOpti1d(n,m,s,t);
    }
};
