class Solution {
public:
    // memoization
    bool solve(int n,int m,string &s,string &p,vector<vector<int>>&dp)
    {
        
        if(n==0 and m==0) return true;
        if(m==0 and n>0)return false;
        if(dp[n][m] != -1)return dp[n][m];
        // s="" p="******";
        if(n==0 and m > 0)
        {
            for(int k=0;k<m;k++)
            {
                if(p[k] != '*') return false;
            }
            return dp[n][m] = true;
        }    
        // ? case
        if(s[n-1] == p[m-1] || p[m-1]=='?') 
            return dp[n][m] = solve(n-1,m-1,s,p,dp);
        // * case
        // abc   ab*
        if(p[m-1] == '*')
        {
            return dp[n][m] = solve(n,m-1,s,p,dp) || solve(n-1,m,s,p,dp);
        }
        return dp[n][m] = false;
    }
    // Tabulation
    bool solveTab(int n,int m,string &s,string &p,vector<vector<int>>&dp)
    {
        for(int i=0;i<=n;i++)
        {
            for(int j=0;j<=m;j++)
            {
                dp[i][j] = 0;
            }
        }
        dp[0][0] = 1;
        // s="" p="******";
        for(int j=1;j<=m;j++)
        {
            int ans = 1;
            for(int k=0;k<j;k++)
            {
                if(p[k] != '*')
                {
                    ans = 0;
                    break;
                } 
            }
            dp[0][j] = ans;
        }
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=m;j++)
            {
                 // ? case
                if(s[i-1] == p[j-1] || p[j-1]=='?') 
                    dp[i][j] = dp[i-1][j-1];
                // * case
                // abc   ab*
                else if(p[j-1] == '*')
                {
                    dp[i][j] = dp[i][j-1] | dp[i-1][j];
                }
                else
                    dp[i][j] = 0;
            }
        }   
       return dp[n][m];
    }
    // space opti
    bool solveSpaceOpti(int n,int m,string &s,string &p,vector<vector<int>>&dp)
    {
        vector<int>cur(m+1,0),prev(m+1,0);
        
        prev[0] = 1;
        cur[0] = 0;
        for(int j=1;j<=m;j++)
        {
            int ans = 1;
            for(int k=0;k<j;k++)
            {
                if(p[k] != '*')
                {
                    ans = 0;
                    break;
                } 
            }
            prev[j] = ans;
            cout<<"prev (j) "<<j<<" "<<prev[j]<<"\n";
        }
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=m;j++)
            {
                 // ? case
                if(s[i-1] == p[j-1] || p[j-1]=='?') 
                    cur[j] = prev[j-1];
                // * case
                // abc   ab*
                else if(p[j-1] == '*')
                {
                    cur[j] = cur[j-1] | prev[j];
                }
                else
                    cur[j] = 0;
            }
            prev = cur;
        }   
       return prev[m];
    }
    bool isMatch(string s, string p) {
          int n = s.length();
          int m = p.length();
          vector<vector<int>>dp(n+1,vector<int>(m+1,-1));
          return solveSpaceOpti(n,m,s,p,dp);
    }
};
