class Solution {
public:
    static bool comp(string &s1,string &s2)
    {
        return s1.size() < s2.size();
    }

    bool checkPossible(string &s1,string &s2)
    {
        //s1 is bigger string ,s2 is smaller string
        if(s1.length() != s2.length()+1)
            return false;

        int first=0,second=0;
        while(first <s1.size() && second <s2.size())
        {

            if(s1[first] == s2[second])
            {
                first++;
                second++;
            }
            else
            {
                first++;
            }
        }
        if(s2.size() == second) return true;
        return false;
    }
    int longestStrChain(vector<string>& words) {
        int n= words.size();
        // sort based on length
        sort(words.begin(),words.end(),comp);
        // initialize everyone with 1
        // dp[i]: longest string chain ending at i
        vector<int>dp(n,1);
        int maxi = 1;
        for(int i=1;i<n;i++)
        {
            for(int prev = 0 ;prev < i ;prev++)
            {
                if(checkPossible(words[i],words[prev]) && dp[i] < dp[prev]+1)
                {
                    dp[i] = dp[prev]+1;

                }
            }
            maxi = max(maxi,dp[i]);
        }
        return maxi;
    }
};
