  #include<bits/stdc++.h>
    //memoization
    int solve(int ind,int prev,int arr[],int n,vector<vector<int>>&dp)
    {
        if(ind==n)return 0;

        if(dp[ind][prev+1] != -1) return dp[ind][prev+1];
        int pick = 0;
        if(prev == -1 || arr[prev] < arr[ind])
        {
            pick = 1 + solve(ind+1,ind,arr,n,dp);
        }
        int notpick = 0 + solve(ind+1,prev,arr,n,dp);
        return dp[ind][prev+1] = max(pick,notpick);

    }
    // Tabulation
    int solveTab(int ind,int prev,int arr[],int n,vector<vector<int>>&dp)
    {
        for(int i=0;i<=n;i++)
        {
            dp[n][i] = 0;
        }

        for(int i=n-1;i>=0 ;i--)
        {
            for(int j=n-1;j>=-1;j--)
            {
                int pick = 0;
                if(j == -1 || arr[j] < arr[i])
                {
                    pick = 1 + dp[i+1][i+1];
                }
                int notpick = 0 + dp[i+1][j+1];
                dp[i][j+1] = max(pick,notpick);  
            }
        }
        return dp[0][-1+1];

    }
    // Space Opti
    int solveSpaceOpti(int ind,int prev,int arr[],int n)
    {
        vector<int>next(n+1,0),cur(n+1,0);
        for(int i=n-1;i>=0 ;i--)
        {
            for(int j=n-1;j>=-1;j--)
            {
                int pick = 0;
                if(j == -1 || arr[j] < arr[i])
                {
                    pick = 1 + next[i+1];
                }
                int notpick = 0 + next[j+1];
                cur[j+1] = max(pick,notpick);  
            }
            next = cur;
        }
        return next[-1+1];

    }
    int longestIncreasingSubsequence(int arr[], int n)
    {
        // vector<vector<int>>dp(n+1,vector<int>(n+1,-1));
        return solveSpaceOpti(0,-1,arr,n);
    }
