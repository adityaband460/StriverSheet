 // memoization
    int solve(int i,int j,int arr[],vector<vector<int>>&dp)
    {
        // only 1 matrix
        if(i==j) return 0;
        if(dp[i][j] != -1) return dp[i][j];
        int mini = 1e9;
        for(int k=i;k<j;k++)
        {
            int steps = solve(i,k,arr,dp)+solve(k+1,j,arr,dp)+ arr[i-1]*arr[k]*arr[j];
            mini = min(mini,steps);
        }
        return dp[i][j] = mini;
    }
    // TAbulation
    int solveTab(int si,int sj,int arr[],vector<vector<int>>&dp)
    {
        int n = sj+1;
        for(int z=0;z<=n-1;z++)
        {
            dp[z][z] = 0;
        }
        
        for(int i= n-1 ;i>=1;i-- )
        {
            // practically j should be on right of i
            // j==i is covered in base case
            for(int j = i+1;j<= n-1;j++)
            {
                int mini = 1e9;
                for(int k=i;k<j;k++)
                {
                    int steps = dp[i][k]+dp[k+1][j]+ 
                    arr[i-1]*arr[k]*arr[j];
                    mini = min(mini,steps);
                }
                dp[i][j] = mini;
            }
        }
        return dp[1][n-1];
    }
    int matrixMultiplication(int N, int arr[])
    {
        vector<vector<int>>dp(N,vector<int>(N,-1));
        return solveTab(1,N-1,arr,dp);
    }
