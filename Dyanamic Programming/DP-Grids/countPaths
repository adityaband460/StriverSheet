
// from row,col how many paths to m,n
int countPaths(int row,int col,int m,int n,vector<vector<int>>&dp)
{
	//base case
	if(row == m-1 && col == n-1)
	{
		return 1;
	}

	if(dp[row][col] != -1) return dp[row][col];
	//rec case
	//move right and left

	int moveRight = 0;
	int moveLeft = 0;
	if(col+1 < n)
		moveRight = countPaths(row,col+1,m,n,dp);

	if(row+1 < m)
		moveLeft = countPaths(row+1,col,m,n,dp); 
	return dp[row][col] = moveRight+moveLeft;
}
int uniquePaths(int m, int n) {
	vector<vector<int>>dp(m+1,vector<int>(n+1,-1));
	return countPaths(0,0,m,n,dp);
}
